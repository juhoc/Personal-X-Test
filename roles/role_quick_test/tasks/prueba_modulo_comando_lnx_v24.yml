---
- name: Tareas por bloques - Validacion formato CRQ o ICR
  block:
    - name: Validando Formato de Cambio o Incidente
      assert:
        that:
          - idcrqincreq | string | regex_search('(CRQ|INC|REQ)[0-9]{12}')
        fail_msg: "El CRQ, INC o REQ no cumplen con la condiciones del formato"
        success_msg: "El CRQ, INC o REQ cumplen con las condiciones del formato"
      run_once: true
      delegate_to: localhost

    - name: Copiar csd_redhat_scan.txt
      become: true
      copy:
        src: files/csd_redhat_scan.txt
        dest: "{{ mountfsasb }}/csd_redhat_scan.sh"
        mode: 0750
        owner: bvmuxat2
        group: automate

    - name: Ejecutar el script csd_redhat_scan
      become: true
      shell: ./csd_redhat_scan.sh -c
      args:
        executable: /bin/ksh
        chdir: "{{ mountfsasb }}"
      environment:
        PATH: "/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:{{ ansible_env.PATH }}"

    - name: Obtener el ultimo reporte de csd_redhat_scan
      become: true
      shell: ls -1rt | tail -1
      args:
        chdir: "{{ mountfsasb }}/checklist"
      register: ultimo_repo_csd_linux

#    - name: Cambiar el ultimo reporte de csd_redhat_scan a executable csv
#      become: true
#      copy:
#        src: "{{ mountfsasb }}/checklist/{{ ultimo_repo_csd_linux.stdout }}"
#        dest: "{{ mountfsasb }}/checklist/{{ ultimo_repo_csd_linux.stdout }}.csv"
#        remote_src: true

    - name: Obtener la salida del ultimo reporte de csd_redhat_scan
      become: true
      shell: "cat {{ ultimo_repo_csd_linux.stdout }}"
      args:
        chdir: /var/opt/ansible/checklist
      register: echo_repo_csd_linux

    - set_fact:
        set_csd_linux: "{{ echo_repo_csd_linux.stdout_lines }}"

- name: Tareas por bloques - Envio de evidencias
  block:
    - name: Obtener fecha
      become: true
      shell: echo $(date +%d-%m-%Y-%H-%M)
      register: salida_tiempo

    - set_fact:
        tiempo: "{{ salida_tiempo.stdout }}"

    - name: Validar archivos esperados previas IPL del OS Linux
      stat:
        path: "{{ fsasb }}/csd.{{ tiempo }}.{{ inventory_hostname.split('.')[0] }}.checklist.csv"
      register: archivo_verificado

    - name: Crear archivos si no existen
      file:
        path: "{{ fsasb }}/csd.{{ tiempo }}.{{ inventory_hostname.split('.')[0] }}.checklist.csv"
        state: touch
      when: not archivo_verificado.stat.exists
        
    - name: Obtener la salida del ultimo reporte de csd_redhat_scan
      become: true
      copy:
        content: "{{ set_csd_linux | | join('\n') }}"
        dest: "{{ fsasb }}/csd.{{ tiempo }}.{{ inventory_hostname.split('.')[0] }}.checklist.csv"
  delegate_to: asitsmaop2.bvm.bluecare.kyndryl.net

- name: Tareas por bloques - Envio de evidencias
  block:
    - shell: ls {{ fsasb }}/{{ idcrqincreq }}_previas.csv
      register: listflcsv

    - name: Envio de evidencias CSV
      mail:
        host: "{{ smtp }}"
        port: "{{ smtpport }}"
        from: "{{ mailfrom }}"
        to: "{{ mailto }}"
        subject: "Reportes evidencias previas GDM Linux Patching"
        body: "Se adjuntan las evidencias previas al IPL"
        attach: "{{ listflcsv.stdout_lines }}"

    - name: Envio de evidencias por folio CRQ, INC o REQ
      debug:
        msg: "{{ 'Se envio el correo al buzon o buzones:' + mailto }}"
      ignore_errors: true
  delegate_to: asitsmaop2.bvm.bluecare.kyndryl.net
  run_once: true

- name: Borrar envio CSV
  block:
    - find:
        paths: "{{ fsasb }}"
        file_type: file
      register: archivos_csv

    - file:
        path: "{{ item.path }}"
        state: absent
      loop: "{{ archivos_csv.files }}"
  no_log: true
  delegate_to: asitsmaop2.bvm.bluecare.kyndryl.net
  run_once: true