---
- block:
    - name: Validar - usuario Qualys entorno PR
      become: true
      shell: |
        usrqlys=$(getent passwd | grep -w zmqalysp | cut -d':' -f1)
        groqlys=$(getent group | grep -w grpalysd | cut -d':' -f1)
        if [ "$usrqlys,$groqlys" = "zmqalysp,grpalysd" ]; then
          echo "zmqalysp,grpalysd,OK"
        elif [ "$usrqlys,$groqlys" = "zmqalysp," ]; then
          echo "zmqalysp,sin grupo,KO"
        elif [ "$usrqlys,$groqlys" = ",grpalysd" ]; then
          echo "sin usuario,grpalysd,KO"
        elif [ "$usrqlys,$groqlys" = "," ]; then
          echo "sin usuario,sin grupo,KO"
        fi
      register: checkuid
    
    - name: Resultado - usuario Qualys entorno PR
      assert:
        that:
          - "'OK' in checkuid.stdout"
        fail_msg: "Resultado: {{ checkuid.stdout }}"
        success_msg: "Resultado: {{ checkuid.stdout }}"
  when: hostvars[inventory_hostname].entorno == "PR"

- block:
    - name: Validar - usuario Qualys entorno EP
      become: true
      shell: |
        usrqlys=$(getent passwd | grep -w zmqalysd | cut -d':' -f1)
        groqlys=$(getent group | grep -w grpalysd | cut -d':' -f1)
        if [ "$usrqlys,$groqlys" = "zmqalysd,grpalysd" ]; then
          echo "zmqalysd,grpalysd,OK"
        elif [ "$usrqlys,$groqlys" = "zmqalysd," ]; then
          echo "zmqalysd,sin grupo,KO"
        elif [ "$usrqlys,$groqlys" = ",grpalysd" ]; then
          echo "sin usuario,grpalysd,KO"
        elif [ "$usrqlys,$groqlys" = "," ]; then
          echo "sin usuario,sin grupo,KO"
        fi
      register: checkuid
    
    - name: Resultado - usuario Qualys entorno EP
      assert:
        that:
          - "'OK' in checkuid.stdout"
        fail_msg: "Resultado: {{ checkuid.stdout }}"
        success_msg: "Resultado: {{ checkuid.stdout }}"
  when: hostvars[inventory_hostname].entorno == "EP"

- block:
    - name: Validar - espacio en el VGPROGPROD
      become: true
      shell: |
        vgname=VGPROGPROD
        vfree=$(vgs --units g --noheadings -o vg_free $vgname | tr -d ' ')
        vfree_GB=$(echo $vfree | tr -d 'gG')
        vgsize=1.01
        if (( $(echo "$vfree_GB < $vgsize" | bc -l) )); then
            echo KO
        else
            echo "$vgname,$vfree,OK"
        fi
      register: checkvg

    - name: Resultado - espacio en el VGPROGPROD
      assert:
        that:
          - "'OK' in checkvg.stdout"
        fail_msg: |
          - "El {{ checkvg.stdout.split(',')[0] }} no solo tiene espacio {{ checkvg.stdout.split(',')[1] }}, no se puede crear el FS Qualys"
          - "Se recomienda utilizar el Jobtempate bvm_jobtemplate_admin_logical_volume_manager_v2"
          - "Para agregar disco, expandir {{ checkvg.stdout.split(',')[1] }}"
        success_msg: "El {{ checkvg.stdout.split(',')[0] }} tiene espacio de {{ checkvg.stdout.split(',')[1] }}, para crear el FS Qualys"
    
    - name: Crear LogicaVolume LVQUALYS
      become: true
      lvol:
        vg: "{{ checkvg.stdout.split(',')[0] }}"
        lv: LVQUALYS
        size: 1.09g
        force: yes
    
    - name: Crear punto de montura Qualys
      become: true
      file:
        path: /qualys
        state: directory
        mode: "0755"
    
    - name: Formatear LogicaVolume LVQUALYS
      become: true
      filesystem:
        fstype: xfs
        dev: "/dev/{{ checkvg.stdout.split(',')[0] }}/LVQUALYS"
    
    - name: Montar el LogicaVolume LVQUALYS
      become: true
      mount:
        path: /qualys
        src: "/dev/{{ checkvg.stdout.split(',')[0] }}/LVQUALYS"
        fstype: xfs
        state: mounted

